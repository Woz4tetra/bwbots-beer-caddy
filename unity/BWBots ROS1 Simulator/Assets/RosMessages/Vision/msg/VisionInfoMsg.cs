//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Vision
{
    [Serializable]
    public class VisionInfoMsg : Message
    {
        public const string k_RosMessageName = "vision_msgs/VisionInfo";
        public override string RosMessageName => k_RosMessageName;

        //  Provides meta-information about a visual pipeline.
        // 
        //  This message serves a similar purpose to sensor_msgs/CameraInfo, but instead
        //    of being tied to hardware, it represents information about a specific
        //    computer vision pipeline. This information stays constant (or relatively
        //    constant) over time, and so it is wasteful to send it with each individual
        //    result. By listening to these messages, subscribers will receive
        //    the context in which published vision messages are to be interpreted.
        //  Each vision pipeline should publish its VisionInfo messages to its own topic,
        //    in a manner similar to CameraInfo.
        //  Used for sequencing
        public HeaderMsg header;
        //  Name of the vision pipeline. This should be a value that is meaningful to an
        //    outside user.
        public string method;
        //  Location where the metadata database is stored. The recommended location is
        //    as an XML string on the ROS parameter server, but the exact implementation
        //    and information is left up to the user.
        //  The database should store information attached to numeric ids. Each
        //    numeric id should map to an atomic, visually recognizable element. This
        //    definition is intentionally vague to allow extreme flexibility. The
        //    elements could be classes in a pixel segmentation algorithm, object classes
        //    in a detector, different people's faces in a face detection algorithm, etc.
        //    Vision pipelines report results in terms of numeric IDs, which map into
        //    this  database.
        //  The information stored in this database is, again, left up to the user. The
        //    database could be as simple as a map from ID to class name, or it could
        //    include information such as object meshes or colors to use for
        //    visualization.
        public string database_location;
        //  Metadata database version. This counter is incremented
        //    each time the pipeline begins using a new version of the database (useful
        //    in the case of online training or user modifications).
        //    The counter value can be monitored by listeners to ensure that the pipeline
        //    and the listener are using the same metadata.
        public int database_version;

        public VisionInfoMsg()
        {
            this.header = new HeaderMsg();
            this.method = "";
            this.database_location = "";
            this.database_version = 0;
        }

        public VisionInfoMsg(HeaderMsg header, string method, string database_location, int database_version)
        {
            this.header = header;
            this.method = method;
            this.database_location = database_location;
            this.database_version = database_version;
        }

        public static VisionInfoMsg Deserialize(MessageDeserializer deserializer) => new VisionInfoMsg(deserializer);

        private VisionInfoMsg(MessageDeserializer deserializer)
        {
            this.header = HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.method);
            deserializer.Read(out this.database_location);
            deserializer.Read(out this.database_version);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.method);
            serializer.Write(this.database_location);
            serializer.Write(this.database_version);
        }

        public override string ToString()
        {
            return "VisionInfoMsg: " +
            "\nheader: " + header.ToString() +
            "\nmethod: " + method.ToString() +
            "\ndatabase_location: " + database_location.ToString() +
            "\ndatabase_version: " + database_version.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
